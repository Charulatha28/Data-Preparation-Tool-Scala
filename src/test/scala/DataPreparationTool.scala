import dataPreparation.OneHotEncoder._
import dataPreparation.TfIdf._
import dataPreparation.WordEmbeddings._
import org.scalatest.FunSuite
class DataPreparationTool extends FunSuite
{
  load("../word2vec-scala/vectors.bin")
  //var tfArray: Array[Array[Float]] = Array (Array(0.0.toFloat, 0.09902103.toFloat, 0.09902103.toFloat, 0.0.toFloat, 0.0.toFloat, 0.0.toFloat, 0.0.toFloat, 0.0.toFloat, 0.0.toFloat),Array(0.0.toFloat, 0.0.toFloat, 0.0.toFloat, 0.0.toFloat, 0.0.toFloat, 0.09902103.toFloat, 0.0.toFloat, 0.0.toFloat, 0.09902103.toFloat))
  //var wordEmbed =vector("king")
  var word:Array[Float]=Array(0.038205978f, -0.04399806f, -0.020940527f, 0.037832417f, 0.011364318f, -0.058891106f, 0.016378699f, 0.07129576f, -0.14051607f, 0.032148033f)
  var word1:Array[Float]=Array(0.05482646f, 0.07408758f, -0.038625516f, -0.016282322f, -0.019883411f, -0.056857113f, 0.01652868f, -0.0023948092f, -0.043816544f, -0.032534268f)
  test("One Hot Encoding- Pass case 1") {
    assert(oneHotEncoded("pizza", "Can I get the pizza. Can I get the coffee!?") sameElements Array(0, 0, 0, 0, 1, 0))
  }
  test("One Hot Encoding- Pass case 2")
  {
    assert(oneHotEncoded("can","Can I get the pizza. Can I get the coffee!?") sameElements Array(1, 0, 0, 0, 0, 0))
  }
  test("One Hot Encoding - Pass case 3")
  {
    assert(oneHotEncoded("tea","Can I get the pizza. Can I get the coffee!?") sameElements Array(0, 0, 0, 0, 0, 0))
  }
  test("One Hot Encoding- Fail case 1")
  {
    assert(oneHotEncoded("can","") sameElements Array(1, 0, 0, 0, 0, 0))
  }
  test("Word Embedding- Pass case 1")
  {
    //assert(wordEmbed==Array(0.038205978, -0.04399806, -0.020940527, 0.037832417, 0.011364318, -0.058891106, 0.016378699, 0.07129576, -0.14051607, 0.032148033, 0.018170219, -0.04892861, 0.1734396, 0.017041655, 0.071837276, 0.06560658, 0.005170933, 0.0015325239, 0.037799634, 0.0722098, -0.047895957, 0.127649, 0.11342578, -0.02444734, 0.0794141, 0.14964136, -0.055180844, 0.093003035, -0.050772287, 0.06446722, -0.023500817, -0.009176108, 0.048118476, 0.0019255405, -0.06674855, 0.036975995, -0.05117981, 0.031190801, 0.079999804, -0.021158101, -0.010666825, 0.011506838, 0.05676961, -0.031839486, -0.05537307, 0.03240332, -0.15352471, 0.08801999, 0.052790508, 0.04474827, 0.024536543, 0.024518691 -0.09010854, 0.021857457, 0.01041684, 0.09642648, 0.017885933, 0.08439873, 0.008485671, 9.0226484E-4, 0.085321546, 0.12181165, -0.012408758, -0.040969506, 0.03579314 0.012055109 0.059152257 0.07692273 -0.10792657 0.0420714 0.02513402 0.03306772 -0.044724107 0.016064717 0.05147282 -0.03565853 -0.042846855 -0.017174179 -0.01675165 0.08654215 -0.10139283 0.12695159 -0.07442335 0.013414074 -0.009111535 -0.07463672 -0.022800654 0.033271857 0.040696528 -0.05673018 -0.08318626 0.086645834 -0.015345198 0.041120958 0.040096737 -0.14253792 0.0015735811 -0.117654294 0.09322286 -0.118643336 -0.05992992 0.03255156 -0.067079455 -0.103870854 0.0724389 0.10754144 0.06842149 -0.015239246 -0.034634024 0.028051829 0.050142247 -0.026664661 0.02327879 -0.12620041 -0.07883954 -0.038387895 0.13114336 0.0816279 0.02524104 -0.01682102 -0.055317625 -0.095525205 0.018018128 0.028905991 -0.08160315 0.042374592 0.035959866 0.054898486 -0.11392223 0.07254385 0.016474457 0.13237464 0.045335684 -0.00564563 0.021945288 -0.09875845 -0.025127567 -0.009016918 0.021175127 -0.016754663 0.026346952 -0.09161044 -0.09775162 0.15677129 0.05544068 0.1557925 -0.14991751 0.030676734 -0.01844707 -0.058945645 0.023376008 -0.05184783 0.040823925 0.021287235 -0.020560717 0.12469312 -0.10196888 -0.107318036 -0.044953886 0.012573125 0.22043312 -0.036991067 0.15987064 -0.035108954 -0.015809458 -0.010362168 0.052270107 -0.02077533 -0.102533974 0.06262239 0.0134083675 -0.081022345 0.018834203 -0.076647826 -0.037779685 -0.1020009 -0.03401388 -0.06474719 0.045755852 -0.019781316 0.024517715 -0.058106124 0.0032336982 0.10500658 0.08333714 -0.11659194, -0.062316757, -0.12922798, 0.022384994, -0.0023009395, 0.06999919, 0.080931574, 0.06836325, 0.021454444, -0.005409898, -0.0022797391, 0.066023946, -0.11281929, -0.16745596, -0.009893864))
    assert(vector("king") sameElements  word)
  }
  test("Word Embedding- Pass case 2")
  {
    assert(vector("one") sameElements word1)
  }
  test("Word Embedding- Fail case 1")
  {
    assert(vector("1") sameElements word)
  }
  test("TF-IDF pass case 1")
    {
      assert(folderProcess("C:\\Users\\charu\\Dropbox\\My PC (DESKTOP-LPRCUF8)\\Downloads\\Sample") === Array(Array(0.0f, 0.09902103f, 0.09902103f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f), Array(0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.09902103f, 0.0f, 0.0f, 0.09902103f)))
    }
  test("TF-IDF fail case 1")
  {
    assert(folderProcess("C:\\Users\\charu\\Dropbox\\My PC (DESKTOP-LPRCUF8)\\Downloads\\Samp") === Array(Array(0.0f, 0.09902103f, 0.09902103f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f), Array(0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.09902103f, 0.0f, 0.0f, 0.09902103f)))
  }
  test("TF-IDF fail case 2")
  {
    assert(folderProcess("C:\\Users\\charu\\OneDrive\\Desktop\\text.txt")===Array(Array(0.0f, 0.09902103f, 0.09902103f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f), Array(0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.09902103f, 0.0f, 0.0f, 0.09902103f)))
  }
}
